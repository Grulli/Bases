\i 1.sql
EXPLAIN ANALYZE
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '90 day'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=423961.61..423961.63 rows=6 width=25) (actual time=32269.893..32269.894 rows=4 loops=1)
   Sort Key: l_returnflag, l_linestatus
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=423961.43..423961.53 rows=6 width=25) (actual time=32269.787..32269.797 rows=4 loops=1)
         ->  Seq Scan on lineitem  (cost=0.00..187518.19 rows=5911081 width=25) (actual time=0.024..2888.535 rows=5916591 loops=1)
               Filter: (l_shipdate <= '1998-09-02 00:00:00'::timestamp without time zone)
 Total runtime: 32270.228 ms
(7 rows)

\i 3.sql
EXPLAIN ANALYZE
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'HOUSEHOLD'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-29'
	and l_shipdate > date '1995-03-29'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
limit 10;;
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=358964.56..358964.59 rows=10 width=24) (actual time=4296.486..4296.489 rows=10 loops=1)
   ->  Sort  (cost=358964.56..359745.18 rows=312248 width=24) (actual time=4296.484..4296.484 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=343630.18..352217.00 rows=312248 width=24) (actual time=4253.833..4292.627 rows=11378 loops=1)
               ->  Sort  (cost=343630.18..344410.80 rows=312248 width=24) (actual time=4253.802..4261.374 rows=30130 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method: external merge  Disk: 1088kB
                     ->  Hash Join  (cost=67552.97..302323.91 rows=312248 width=24) (actual time=846.218..4219.955 rows=30130 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..187518.19 rows=3212338 width=16) (actual time=0.007..1947.780 rows=3206366 loops=1)
                                 Filter: (l_shipdate > '1995-03-29'::date)
                           ->  Hash  (cost=65018.42..65018.42 rows=145804 width=12) (actual time=845.205..845.205 rows=146895 loops=1)
                                 Buckets: 4096  Batches: 8  Memory Usage: 797kB
                                 ->  Hash Join  (cost=5950.19..65018.42 rows=145804 width=12) (actual time=54.797..797.680 rows=146895 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..44845.00 rows=732559 width=16) (actual time=0.008..429.291 rows=735982 loops=1)
                                             Filter: (o_orderdate < '1995-03-29'::date)
                                       ->  Hash  (cost=5460.00..5460.00 rows=29855 width=4) (actual time=54.645..54.645 rows=30189 loops=1)
                                             Buckets: 4096  Batches: 2  Memory Usage: 535kB
                                             ->  Seq Scan on customer  (cost=0.00..5460.00 rows=29855 width=4) (actual time=0.014..46.343 rows=30189 loops=1)
                                                   Filter: (c_mktsegment = 'HOUSEHOLD'::bpchar)
 Total runtime: 4297.496 ms
(23 rows)

\i 4.sql
EXPLAIN ANALYZE
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1997-07-01'
	and o_orderdate < date '1997-07-01' + interval '3 month'
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=162237.28..162237.29 rows=1 width=16) (actual time=961.483..961.483 rows=5 loops=1)
   Sort Key: orders.o_orderpriority
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=162237.26..162237.27 rows=1 width=16) (actual time=961.464..961.465 rows=5 loops=1)
         ->  Nested Loop Semi Join  (cost=0.00..162161.05 rows=15242 width=16) (actual time=0.083..934.112 rows=52556 loops=1)
               ->  Seq Scan on orders  (cost=0.00..48595.00 rows=57096 width=20) (actual time=0.012..325.354 rows=57359 loops=1)
                     Filter: ((o_orderdate >= '1997-07-01'::date) AND (o_orderdate < '1997-10-01 00:00:00'::timestamp without time zone))
               ->  Index Scan using l_orderkey_idx on lineitem  (cost=0.00..8.42 rows=5 width=4) (actual time=0.010..0.010 rows=1 loops=57359)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
 Total runtime: 961.543 ms
(11 rows)

\i 6.sql
EXPLAIN ANALYZE
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1994-01-01'
	and l_shipdate < date '1994-01-01' + interval '1 year'
	and l_discount between 0.06 - 0.01 and 0.06 + 0.01
	and l_quantity < 24;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=248095.55..248095.56 rows=1 width=12) (actual time=2055.001..2055.001 rows=1 loops=1)
   ->  Seq Scan on lineitem  (cost=0.00..247530.34 rows=113043 width=12) (actual time=0.024..1965.759 rows=114160 loops=1)
         Filter: ((l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.05) AND (l_discount <= 0.07) AND (l_quantity < 24::numeric))
 Total runtime: 2055.036 ms
(4 rows)

\i 7.sql
EXPLAIN ANALYZE
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
				or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=313309.27..313500.92 rows=5897 width=224) (actual time=4136.449..4142.327 rows=4 loops=1)
   ->  Sort  (cost=313309.27..313324.01 rows=5897 width=224) (actual time=4134.395..4135.715 rows=5924 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method: external sort  Disk: 528kB
         ->  Hash Join  (cost=71760.82..312313.45 rows=5897 width=224) (actual time=1033.020..4000.361 rows=5924 loops=1)
               Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
               ->  Hash Join  (cost=71288.82..307329.95 rows=147435 width=232) (actual time=1020.026..3920.597 rows=148370 loops=1)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..202521.22 rows=1844412 width=24) (actual time=0.014..1933.141 rows=1828450 loops=1)
                           Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Hash  (cost=66277.02..66277.02 rows=119904 width=216) (actual time=1018.981..1018.981 rows=121324 loops=1)
                           Buckets: 1024  Batches: 32  Memory Usage: 352kB
                           ->  Hash Join  (cost=6286.02..66277.02 rows=119904 width=216) (actual time=86.208..963.254 rows=121324 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41095.00 rows=1500000 width=8) (actual time=0.010..368.066 rows=1500000 loops=1)
                                 ->  Hash  (cost=5784.15..5784.15 rows=11990 width=216) (actual time=86.000..86.000 rows=12008 loops=1)
                                       Buckets: 1024  Batches: 4  Memory Usage: 279kB
                                       ->  Hash Join  (cost=16.65..5784.15 rows=11990 width=216) (actual time=8.645..80.024 rows=12008 loops=1)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5085.00 rows=150000 width=8) (actual time=0.010..37.118 rows=150000 loops=1)
                                             ->  Hash  (cost=16.62..16.62 rows=2 width=216) (actual time=8.613..8.613 rows=2 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Nested Loop  (cost=0.00..16.62 rows=2 width=216) (actual time=8.455..8.611 rows=2 loops=1)
                                                         Join Filter: (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar)))
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=108) (actual time=8.292..8.294 rows=25 loops=1)
                                                         ->  Materialize  (cost=0.00..1.38 rows=25 width=108) (actual time=0.001..0.005 rows=25 loops=25)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108) (actual time=0.006..0.014 rows=25 loops=1)
               ->  Hash  (cost=322.00..322.00 rows=10000 width=8) (actual time=12.962..12.962 rows=10000 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 391kB
                     ->  Seq Scan on supplier  (cost=0.00..322.00 rows=10000 width=8) (actual time=0.007..7.749 rows=10000 loops=1)
 Total runtime: 4142.680 ms
(31 rows)

\i 10.sql
EXPLAIN ANALYZE
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-03-01'
	and o_orderdate < date '1993-03-01' + interval '3 month'
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
limit 20;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=301460.23..301460.28 rows=20 width=259) (actual time=5777.843..5777.848 rows=20 loops=1)
   ->  Sort  (cost=301460.23..301602.35 rows=56847 width=259) (actual time=5777.841..5777.843 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 30kB
         ->  GroupAggregate  (cost=297815.79..299947.55 rows=56847 width=259) (actual time=5478.741..5754.881 rows=37859 loops=1)
               ->  Sort  (cost=297815.79..297957.91 rows=56847 width=259) (actual time=5478.712..5590.543 rows=114028 loops=1)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     Sort Method: external merge  Disk: 21768kB
                     ->  Hash Join  (cost=59721.41..279333.35 rows=56847 width=259) (actual time=525.141..3204.864 rows=114028 loops=1)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=59719.85..278550.15 rows=56847 width=159) (actual time=525.108..3154.613 rows=114028 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=49536.85..263522.27 rows=56847 width=16) (actual time=369.645..2842.909 rows=114028 loops=1)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..187518.19 rows=1486901 width=16) (actual time=0.022..1781.453 rows=1478870 loops=1)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=48595.00..48595.00 rows=57348 width=8) (actual time=369.208..369.208 rows=56934 loops=1)
                                             Buckets: 4096  Batches: 4  Memory Usage: 561kB
                                             ->  Seq Scan on orders  (cost=0.00..48595.00 rows=57348 width=8) (actual time=0.020..349.737 rows=56934 loops=1)
                                                   Filter: ((o_orderdate >= '1993-03-01'::date) AND (o_orderdate < '1993-06-01 00:00:00'::timestamp without time zone))
                                 ->  Hash  (cost=5085.00..5085.00 rows=150000 width=147) (actual time=152.312..152.312 rows=150000 loops=1)
                                       Buckets: 1024  Batches: 32  Memory Usage: 866kB
                                       ->  Seq Scan on customer  (cost=0.00..5085.00 rows=150000 width=147) (actual time=0.009..54.196 rows=150000 loops=1)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108) (actual time=0.019..0.019 rows=25 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 2kB
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108) (actual time=0.007..0.012 rows=25 loops=1)
 Total runtime: 5784.922 ms
(27 rows)

\i 11.sql
EXPLAIN ANALYZE
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'GERMANY'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) * 0.0001000000
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'GERMANY'
		)
order by
	value desc;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=65446.80..65526.77 rows=31987 width=14) (actual time=693.554..693.653 rows=1048 loops=1)
   Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
   Sort Method: quicksort  Memory: 98kB
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=29380.60..29380.61 rows=1 width=10) (actual time=327.102..327.102 rows=1 loops=1)
           ->  Hash Join  (cost=369.82..29140.69 rows=31987 width=10) (actual time=4.335..301.048 rows=31680 loops=1)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..25451.00 rows=800000 width=14) (actual time=0.011..172.148 rows=800000 loops=1)
                 ->  Hash  (cost=364.82..364.82 rows=400 width=4) (actual time=4.304..4.304 rows=396 loops=1)
                       Buckets: 1024  Batches: 1  Memory Usage: 14kB
                       ->  Hash Join  (cost=1.32..364.82 rows=400 width=4) (actual time=0.038..4.181 rows=396 loops=1)
                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                             ->  Seq Scan on supplier  (cost=0.00..322.00 rows=10000 width=8) (actual time=0.006..1.980 rows=10000 loops=1)
                             ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)
                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.009..0.012 rows=1 loops=1)
                                         Filter: (n_name = 'GERMANY'::bpchar)
   ->  GroupAggregate  (cost=32083.65..33123.23 rows=31987 width=14) (actual time=660.098..692.337 rows=1048 loops=1)
         Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
         ->  Sort  (cost=32083.65..32163.62 rows=31987 width=14) (actual time=332.923..339.420 rows=31680 loops=1)
               Sort Key: public.partsupp.ps_partkey
               Sort Method: external merge  Disk: 808kB
               ->  Hash Join  (cost=369.82..29140.69 rows=31987 width=14) (actual time=4.149..303.878 rows=31680 loops=1)
                     Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..25451.00 rows=800000 width=18) (actual time=0.012..176.023 rows=800000 loops=1)
                     ->  Hash  (cost=364.82..364.82 rows=400 width=4) (actual time=4.127..4.127 rows=396 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 14kB
                           ->  Hash Join  (cost=1.32..364.82 rows=400 width=4) (actual time=0.030..3.985 rows=396 loops=1)
                                 Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                 ->  Seq Scan on supplier  (cost=0.00..322.00 rows=10000 width=8) (actual time=0.005..1.924 rows=10000 loops=1)
                                 ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.009 rows=1 loops=1)
                                             Filter: (n_name = 'GERMANY'::bpchar)
 Total runtime: 694.141 ms
(35 rows)

\i 15.sql
create view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= date '1995-12-01'
		and l_shipdate < date '1995-12-01' + interval '3 month'
	group by
		l_suppkey;
CREATE VIEW

EXPLAIN ANALYZE
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join  (cost=411551.24..412077.53 rows=393 width=103) (actual time=4008.698..4008.700 rows=1 loops=1)
   Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=204884.31..204884.32 rows=1 width=32) (actual time=2004.479..2004.479 rows=1 loops=1)
           ->  HashAggregate  (cost=204875.46..204879.39 rows=393 width=16) (actual time=1999.713..2003.111 rows=10000 loops=1)
                 ->  Seq Scan on lineitem  (cost=0.00..202521.22 rows=235424 width=16) (actual time=0.050..1657.405 rows=225975 loops=1)
                       Filter: ((l_shipdate >= '1995-12-01'::date) AND (l_shipdate < '1996-03-01 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_suppkey_idx on supplier  (cost=0.00..495.40 rows=10000 width=71) (actual time=0.012..2.514 rows=7896 loops=1)
   ->  Sort  (cost=206666.92..206667.91 rows=393 width=36) (actual time=4005.288..4005.289 rows=1 loops=1)
         Sort Key: revenue0.supplier_no
         Sort Method: quicksort  Memory: 25kB
         ->  Subquery Scan on revenue0  (cost=206641.14..206649.99 rows=393 width=36) (actual time=4005.269..4005.280 rows=1 loops=1)
               ->  HashAggregate  (cost=206641.14..206646.06 rows=393 width=16) (actual time=4005.267..4005.278 rows=1 loops=1)
                     Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                     ->  Seq Scan on lineitem  (cost=0.00..202521.22 rows=235424 width=16) (actual time=0.045..1642.365 rows=225975 loops=1)
                           Filter: ((l_shipdate >= '1995-12-01'::date) AND (l_shipdate < '1996-03-01 00:00:00'::timestamp without time zone))
 Total runtime: 4008.806 ms
(17 rows)



drop view revenue0;
DROP VIEW
\i 19.sql
EXPLAIN ANALYZE
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#23'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 1 and l_quantity <= 1 + 10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#15'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 10 and l_quantity <= 10 + 10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#44'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 20 and l_quantity <= 20 + 10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=230972.63..230972.64 rows=1 width=12) (actual time=2649.793..2649.793 rows=1 loops=1)
   ->  Hash Join  (cost=10465.00..230971.79 rows=111 width=12) (actual time=591.326..2649.548 rows=107 loops=1)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (((part.p_brand = 'Brand#23'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 1::numeric) AND (lineitem.l_quantity <= 11::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#15'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
         ->  Seq Scan on lineitem  (cost=0.00..202521.22 rows=216578 width=21) (actual time=0.047..2225.751 rows=214377 loops=1)
               Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
         ->  Hash  (cost=6597.00..6597.00 rows=200000 width=30) (actual time=150.291..150.291 rows=200000 loops=1)
               Buckets: 2048  Batches: 16  Memory Usage: 792kB
               ->  Seq Scan on part  (cost=0.00..6597.00 rows=200000 width=30) (actual time=0.017..76.031 rows=200000 loops=1)
                     Filter: (p_size >= 1)
 Total runtime: 2649.881 ms
(11 rows)

\i 20.sql
EXPLAIN ANALYZE
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'forest%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= date '1993-01-01'
					and l_shipdate < date '1993-01-01' + interval '1 year'
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'CANADA'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1025267.07..1025267.34 rows=108 width=51) (actual time=839.800..839.818 rows=179 loops=1)
   Sort Key: supplier.s_name
   Sort Method: quicksort  Memory: 46kB
   ->  Hash Semi Join  (cost=1024896.38..1025263.42 rows=108 width=51) (actual time=834.587..839.570 rows=179 loops=1)
         Hash Cond: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Hash Join  (cost=1.32..364.82 rows=400 width=55) (actual time=0.028..4.656 rows=412 loops=1)
               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Seq Scan on supplier  (cost=0.00..322.00 rows=10000 width=59) (actual time=0.007..2.776 rows=10000 loops=1)
               ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 1kB
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.009 rows=1 loops=1)
                           Filter: (n_name = 'CANADA'::bpchar)
         ->  Hash  (cost=1024861.32..1024861.32 rows=2699 width=4) (actual time=834.536..834.536 rows=5779 loops=1)
               Buckets: 1024  Batches: 1  Memory Usage: 204kB
               ->  Nested Loop  (cost=6602.05..1024861.32 rows=2699 width=4) (actual time=43.287..831.462 rows=5779 loops=1)
                     ->  HashAggregate  (cost=6602.05..6622.25 rows=2020 width=4) (actual time=42.926..44.296 rows=2127 loops=1)
                           ->  Seq Scan on part  (cost=0.00..6597.00 rows=2020 width=4) (actual time=0.054..41.838 rows=2127 loops=1)
                                 Filter: ((p_name)::text ~~ 'forest%'::text)
                     ->  Index Scan using ps_partkey_idx on partsupp  (cost=0.00..504.07 rows=1 width=8) (actual time=0.282..0.369 rows=3 loops=2127)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=124.27..124.28 rows=1 width=5) (actual time=0.086..0.086 rows=1 loops=8508)
                                   ->  Bitmap Heap Scan on lineitem  (cost=5.13..124.26 rows=1 width=5) (actual time=0.054..0.084 rows=1 loops=8508)
                                         Recheck Cond: (l_partkey = partsupp.ps_partkey)
                                         Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_suppkey = partsupp.ps_suppkey))
                                         ->  Bitmap Index Scan on l_partkey_idx  (cost=0.00..5.13 rows=30 width=0) (actual time=0.008..0.008 rows=30 loops=8508)
                                               Index Cond: (l_partkey = partsupp.ps_partkey)
 Total runtime: 839.919 ms
(29 rows)

\i 21.sql
EXPLAIN ANALYZE
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'BRAZIL'
group by
	s_name
order by
	numwait desc,
	s_name
limit 100;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=492144.36..492144.36 rows=1 width=26) (actual time=10025.807..10025.832 rows=100 loops=1)
   ->  Sort  (cost=492144.36..492144.36 rows=1 width=26) (actual time=10025.806..10025.817 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method: top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=492144.34..492144.35 rows=1 width=26) (actual time=10024.767..10024.872 rows=397 loops=1)
               ->  Nested Loop Anti Join  (cost=271343.16..492144.33 rows=1 width=26) (actual time=3129.818..10018.176 rows=3913 loops=1)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop  (cost=271343.16..492126.53 rows=1 width=34) (actual time=3126.421..8824.789 rows=69924 loops=1)
                           ->  Hash Semi Join  (cost=271343.16..492118.08 rows=1 width=38) (actual time=3126.369..6690.680 rows=145414 loops=1)
                                 Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                 Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                 ->  Hash Join  (cost=369.82..196189.69 rows=80016 width=34) (actual time=8.207..2667.851 rows=150857 loops=1)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..187518.19 rows=2000405 width=8) (actual time=0.011..2038.105 rows=3793296 loops=1)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=364.82..364.82 rows=400 width=30) (actual time=8.186..8.186 rows=397 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 25kB
                                             ->  Hash Join  (cost=1.32..364.82 rows=400 width=30) (actual time=0.122..7.895 rows=397 loops=1)
                                                   Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..322.00 rows=10000 width=34) (actual time=0.058..3.440 rows=10000 loops=1)
                                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.029..0.029 rows=1 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.019..0.027 rows=1 loops=1)
                                                               Filter: (n_name = 'BRAZIL'::bpchar)
                                 ->  Hash  (cost=172515.15..172515.15 rows=6001215 width=8) (actual time=3116.566..3116.566 rows=6001215 loops=1)
                                       Buckets: 4096  Batches: 256  Memory Usage: 948kB
                                       ->  Seq Scan on lineitem l2  (cost=0.00..172515.15 rows=6001215 width=8) (actual time=0.005..1518.811 rows=6001215 loops=1)
                           ->  Index Scan using o_orderkey_idx on orders  (cost=0.00..8.43 rows=1 width=4) (actual time=0.014..0.014 rows=0 loops=145414)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
                     ->  Index Scan using l_orderkey_idx on lineitem l3  (cost=0.00..8.86 rows=5 width=8) (actual time=0.016..0.016 rows=1 loops=69924)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: (l_receiptdate > l_commitdate)
 Total runtime: 10025.943 ms
(34 rows)

\i 22.sql
EXPLAIN ANALYZE
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('13', '31', '23', '29', '30', '18', '17')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('13', '31', '23', '29', '30', '18', '17')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as custsale
group by
	cntrycode
order by
	cntrycode;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=86730.78..86748.80 rows=721 width=22) (actual time=1125.766..1128.915 rows=7 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=7534.27..7534.28 rows=1 width=6) (actual time=163.579..163.579 rows=1 loops=1)
           ->  Seq Scan on customer  (cost=0.00..7522.50 rows=4708 width=6) (actual time=0.015..134.136 rows=38120 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
   ->  Sort  (cost=79196.50..79198.30 rows=721 width=22) (actual time=1125.246..1125.858 rows=6384 loops=1)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         Sort Method: quicksort  Memory: 691kB
         ->  Hash Anti Join  (cost=65705.00..79162.27 rows=721 width=22) (actual time=874.941..1118.972 rows=6384 loops=1)
               Hash Cond: (public.customer.c_custkey = orders.o_custkey)
               ->  Seq Scan on customer  (cost=0.00..7522.50 rows=1724 width=26) (actual time=163.622..259.125 rows=19000 loops=1)
                     Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
               ->  Hash  (cost=41095.00..41095.00 rows=1500000 width=4) (actual time=706.951..706.951 rows=1500000 loops=1)
                     Buckets: 4096  Batches: 64  Memory Usage: 886kB
                     ->  Seq Scan on orders  (cost=0.00..41095.00 rows=1500000 width=4) (actual time=0.014..362.015 rows=1500000 loops=1)
 Total runtime: 1128.987 ms
(16 rows)

