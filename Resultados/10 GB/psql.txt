\i 1.sql
EXPLAIN ANALYZE
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '90 day'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4236631.87..4236631.89 rows=6 width=25) (actual time=322393.094..322393.094 rows=4 loops=1)
   Sort Key: l_returnflag, l_linestatus
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=4236631.69..4236631.79 rows=6 width=25) (actual time=322392.998..322393.010 rows=4 loops=1)
         ->  Seq Scan on lineitem  (cost=0.00..1871788.65 rows=59121076 width=25) (actual time=0.026..28331.550 rows=59142609 loops=1)
               Filter: (l_shipdate <= '1998-09-02 00:00:00'::timestamp without time zone)
 Total runtime: 322393.413 ms
(7 rows)

\i 3.sql
EXPLAIN ANALYZE
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'HOUSEHOLD'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-29'
	and l_shipdate > date '1995-03-29'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
limit 10;;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3768657.49..3768657.51 rows=10 width=24) (actual time=44554.372..44554.375 rows=10 loops=1)
   ->  Sort  (cost=3768657.49..3776657.32 rows=3199933 width=24) (actual time=44554.371..44554.373 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=3611509.93..3699508.09 rows=3199933 width=24) (actual time=44113.659..44518.349 rows=112994 loops=1)
               ->  Sort  (cost=3611509.93..3619509.76 rows=3199933 width=24) (actual time=44113.639..44210.906 rows=298135 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method: external merge  Disk: 10784kB
                     ->  Hash Join  (cost=687027.55..3068888.40 rows=3199933 width=24) (actual time=8589.194..43703.838 rows=298135 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1871788.65 rows=31879374 width=16) (actual time=0.013..18430.573 rows=31984182 loops=1)
                                 Filter: (l_shipdate > '1995-03-29'::date)
                           ->  Hash  (cost=660855.00..660855.00 rows=1505644 width=12) (actual time=8533.324..8533.324 rows=1471530 loops=1)
                                 Buckets: 4096  Batches: 128  Memory Usage: 506kB
                                 ->  Hash Join  (cost=59599.88..660855.00 rows=1505644 width=12) (actual time=479.266..8055.844 rows=1471530 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..448412.00 rows=7376993 width=16) (actual time=0.011..3837.809 rows=7376597 loops=1)
                                             Filter: (o_orderdate < '1995-03-29'::date)
                                       ->  Hash  (cost=54577.00..54577.00 rows=306150 width=4) (actual time=478.947..478.947 rows=299751 loops=1)
                                             Buckets: 4096  Batches: 16  Memory Usage: 666kB
                                             ->  Seq Scan on customer  (cost=0.00..54577.00 rows=306150 width=4) (actual time=0.003..401.255 rows=299751 loops=1)
                                                   Filter: (c_mktsegment = 'HOUSEHOLD'::bpchar)
 Total runtime: 44557.920 ms
(23 rows)

\i 4.sql
EXPLAIN ANALYZE
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1997-07-01'
	and o_orderdate < date '1997-07-01' + interval '3 month'
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=812132.20..812132.20 rows=1 width=16) (actual time=8241.510..8241.511 rows=5 loops=1)
   Sort Key: orders.o_orderpriority
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=812132.18..812132.19 rows=1 width=16) (actual time=8241.497..8241.497 rows=5 loops=1)
         ->  Nested Loop Semi Join  (cost=0.00..812049.23 rows=16590 width=16) (actual time=0.056..7970.293 rows=525915 loops=1)
               ->  Seq Scan on orders  (cost=0.00..485912.00 rows=573569 width=20) (actual time=0.014..2922.045 rows=573962 loops=1)
                     Filter: ((o_orderdate >= '1997-07-01'::date) AND (o_orderdate < '1997-10-01 00:00:00'::timestamp without time zone))
               ->  Index Scan using l_orderkey_idx on lineitem  (cost=0.00..25.42 rows=46 width=4) (actual time=0.008..0.008 rows=1 loops=573962)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
 Total runtime: 8241.567 ms
(11 rows)

\i 6.sql
EXPLAIN ANALYZE
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1994-01-01'
	and l_shipdate < date '1994-01-01' + interval '1 year'
	and l_discount between 0.06 - 0.01 and 0.06 + 0.01
	and l_quantity < 24;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2477270.40..2477270.41 rows=1 width=12) (actual time=19017.346..19017.346 rows=1 loops=1)
   ->  Seq Scan on lineitem  (cost=0.00..2471649.17 rows=1124246 width=12) (actual time=0.012..18170.173 rows=1139264 loops=1)
         Filter: ((l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.05) AND (l_discount <= 0.07) AND (l_quantity < 24::numeric))
 Total runtime: 19017.372 ms
(4 rows)

\i 7.sql
EXPLAIN ANALYZE
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
				or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=3210660.30..3212559.05 rows=58423 width=224) (actual time=41321.795..41646.093 rows=4 loops=1)
   ->  Sort  (cost=3210660.30..3210806.36 rows=58423 width=224) (actual time=41188.457..41572.215 rows=58365 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method: external merge  Disk: 5104kB
         ->  Hash Join  (cost=717757.85..3193651.88 rows=58423 width=224) (actual time=11617.376..39864.055 rows=58365 loops=1)
               Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (n1.n_nationkey = supplier.s_nationkey))
               ->  Hash Join  (cost=712650.85..3066780.19 rows=1460567 width=232) (actual time=10522.231..38623.500 rows=1463770 loops=1)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..2021753.78 rows=18271705 width=24) (actual time=0.013..18085.201 rows=18230325 loops=1)
                           Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                     ->  Hash  (cost=662533.85..662533.85 rows=1199040 width=216) (actual time=10504.508..10504.508 rows=1205808 loops=1)
                           Buckets: 1024  Batches: 512  Memory Usage: 225kB
                           ->  Hash Join  (cost=62680.45..662533.85 rows=1199040 width=216) (actual time=648.416..9898.377 rows=1205808 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..410912.00 rows=15000000 width=8) (actual time=0.009..3379.862 rows=15000000 loops=1)
                                 ->  Hash  (cost=57668.65..57668.65 rows=119904 width=216) (actual time=647.926..647.926 rows=120469 loops=1)
                                       Buckets: 1024  Batches: 32  Memory Usage: 350kB
                                       ->  Hash Join  (cost=16.65..57668.65 rows=119904 width=216) (actual time=0.253..592.791 rows=120469 loops=1)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50827.00 rows=1500000 width=8) (actual time=0.004..291.966 rows=1500000 loops=1)
                                             ->  Hash  (cost=16.62..16.62 rows=2 width=216) (actual time=0.237..0.237 rows=2 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                   ->  Nested Loop  (cost=0.00..16.62 rows=2 width=216) (actual time=0.081..0.236 rows=2 loops=1)
                                                         Join Filter: (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar)))
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=108) (actual time=0.008..0.011 rows=25 loops=1)
                                                         ->  Materialize  (cost=0.00..1.38 rows=25 width=108) (actual time=0.000..0.003 rows=25 loops=25)
                                                               ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108) (actual time=0.002..0.006 rows=25 loops=1)
               ->  Hash  (cost=3216.00..3216.00 rows=100000 width=8) (actual time=50.314..50.314 rows=100000 loops=1)
                     Buckets: 4096  Batches: 4  Memory Usage: 984kB
                     ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=8) (actual time=0.003..26.452 rows=100000 loops=1)
 Total runtime: 41650.817 ms
(31 rows)

\i 10.sql
EXPLAIN ANALYZE
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-03-01'
	and o_orderdate < date '1993-03-01' + interval '3 month'
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
limit 20;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3085059.02..3085059.07 rows=20 width=259) (actual time=57281.228..57281.234 rows=20 loops=1)
   ->  Sort  (cost=3085059.02..3086474.32 rows=566119 width=259) (actual time=57281.226..57281.227 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 30kB
         ->  GroupAggregate  (cost=3048765.34..3069994.80 rows=566119 width=259) (actual time=54358.194..57062.616 rows=381972 loops=1)
               ->  Sort  (cost=3048765.34..3050180.64 rows=566119 width=259) (actual time=54358.170..55450.266 rows=1148153 loops=1)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     Sort Method: external merge  Disk: 218832kB
                     ->  Hash Join  (cost=597186.31..2785689.06 rows=566119 width=259) (actual time=5847.451..30905.280 rows=1148153 loops=1)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=597184.75..2777903.36 rows=566119 width=159) (actual time=5847.403..30392.802 rows=1148153 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=495380.75..2629142.92 rows=566119 width=16) (actual time=3329.384..26824.905 rows=1148153 loops=1)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1871788.65 rows=14714578 width=16) (actual time=0.018..16261.138 rows=14808183 loops=1)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=485912.00..485912.00 rows=577100 width=8) (actual time=3326.915..3326.915 rows=573330 loops=1)
                                             Buckets: 4096  Batches: 32  Memory Usage: 710kB
                                             ->  Seq Scan on orders  (cost=0.00..485912.00 rows=577100 width=8) (actual time=0.027..3138.646 rows=573330 loops=1)
                                                   Filter: ((o_orderdate >= '1993-03-01'::date) AND (o_orderdate < '1993-06-01 00:00:00'::timestamp without time zone))
                                 ->  Hash  (cost=50827.00..50827.00 rows=1500000 width=147) (actual time=1617.453..1617.453 rows=1500000 loops=1)
                                       Buckets: 1024  Batches: 512  Memory Usage: 558kB
                                       ->  Seq Scan on customer  (cost=0.00..50827.00 rows=1500000 width=147) (actual time=0.006..493.635 rows=1500000 loops=1)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108) (actual time=0.036..0.036 rows=25 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 2kB
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108) (actual time=0.008..0.019 rows=25 loops=1)
 Total runtime: 57348.170 ms
(27 rows)

\i 11.sql
EXPLAIN ANALYZE
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'GERMANY'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) * 0.0001000000
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'GERMANY'
		)
order by
	value desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=723087.81..723873.15 rows=314138 width=14) (actual time=7231.512..7231.512 rows=0 loops=1)
   Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
   Sort Method: quicksort  Memory: 25kB
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=323565.74..323565.75 rows=1 width=10) (actual time=3438.551..3438.552 rows=1 loops=1)
           ->  Hash Join  (cost=3682.32..321209.71 rows=314138 width=10) (actual time=39.037..3175.227 rows=323920 loops=1)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..254386.00 rows=8000000 width=14) (actual time=0.008..1502.761 rows=8000000 loops=1)
                 ->  Hash  (cost=3632.32..3632.32 rows=4000 width=4) (actual time=38.944..38.944 rows=4049 loops=1)
                       Buckets: 1024  Batches: 1  Memory Usage: 143kB
                       ->  Hash Join  (cost=1.32..3632.32 rows=4000 width=4) (actual time=0.031..37.736 rows=4049 loops=1)
                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                             ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=8) (actual time=0.005..19.400 rows=100000 loops=1)
                             ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.007..0.010 rows=1 loops=1)
                                         Filter: (n_name = 'GERMANY'::bpchar)
   ->  GroupAggregate  (cost=355261.14..365470.62 rows=314138 width=14) (actual time=7231.509..7231.509 rows=0 loops=1)
         Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
         ->  Sort  (cost=355261.14..356046.48 rows=314138 width=14) (actual time=3471.426..3528.304 rows=323920 loops=1)
               Sort Key: public.partsupp.ps_partkey
               Sort Method: external sort  Disk: 8248kB
               ->  Hash Join  (cost=3682.32..321209.71 rows=314138 width=14) (actual time=40.339..3165.197 rows=323920 loops=1)
                     Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..254386.00 rows=8000000 width=18) (actual time=0.009..1495.603 rows=8000000 loops=1)
                     ->  Hash  (cost=3632.32..3632.32 rows=4000 width=4) (actual time=40.253..40.253 rows=4049 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 143kB
                           ->  Hash Join  (cost=1.32..3632.32 rows=4000 width=4) (actual time=0.027..39.055 rows=4049 loops=1)
                                 Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                 ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=8) (actual time=0.003..19.627 rows=100000 loops=1)
                                 ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.009 rows=1 loops=1)
                                             Filter: (n_name = 'GERMANY'::bpchar)
 Total runtime: 7234.018 ms
(35 rows)

\i 15.sql
create view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= date '1995-12-01'
		and l_shipdate < date '1995-12-01' + interval '3 month'
	group by
		l_suppkey;
CREATE VIEW

EXPLAIN ANALYZE
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join  (cost=4104802.43..4109934.18 rows=3686 width=103) (actual time=38420.979..38420.982 rows=1 loops=1)
   Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=2043986.04..2043986.05 rows=1 width=32) (actual time=19293.196..19293.196 rows=1 loops=1)
           ->  HashAggregate  (cost=2043903.10..2043939.96 rows=3686 width=16) (actual time=19242.045..19279.173 rows=100000 loops=1)
                 ->  Seq Scan on lineitem  (cost=0.00..2021753.78 rows=2214932 width=16) (actual time=0.020..15687.450 rows=2265119 loops=1)
                       Filter: ((l_shipdate >= '1995-12-01'::date) AND (l_shipdate < '1996-03-01 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_suppkey_idx on supplier  (cost=0.00..4826.47 rows=100000 width=71) (actual time=0.018..10.261 rows=33988 loops=1)
   ->  Sort  (cost=2060816.38..2060825.60 rows=3686 width=36) (actual time=38406.873..38406.874 rows=1 loops=1)
         Sort Key: revenue0.supplier_no
         Sort Method: quicksort  Memory: 25kB
         ->  Subquery Scan on revenue0  (cost=2060515.09..2060598.03 rows=3686 width=36) (actual time=38399.654..38406.863 rows=1 loops=1)
               ->  HashAggregate  (cost=2060515.09..2060561.17 rows=3686 width=16) (actual time=38399.653..38406.860 rows=1 loops=1)
                     Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                     ->  Seq Scan on lineitem  (cost=0.00..2021753.78 rows=2214932 width=16) (actual time=0.032..15415.184 rows=2265119 loops=1)
                           Filter: ((l_shipdate >= '1995-12-01'::date) AND (l_shipdate < '1996-03-01 00:00:00'::timestamp without time zone))
 Total runtime: 38423.257 ms
(17 rows)



drop view revenue0;
DROP VIEW
\i 19.sql
EXPLAIN ANALYZE
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#23'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 1 and l_quantity <= 1 + 10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#15'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 10 and l_quantity <= 10 + 10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#44'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 20 and l_quantity <= 20 + 10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);
                                                                                                                                                                                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                                                                                                                                                                               

 Aggregate  (cost=2300591.94..2300591.95 rows=1 width=12) (actual time=24968.643..24968.643 rows=1 loops=1)
   ->  Hash Join  (cost=104634.00..2300584.36 rows=1010 width=12) (actual time=8305.335..24967.128 rows=1053 loops=1)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (((part.p_brand = 'Brand#23'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 1::numeric) AND (lineitem.l_quantity <= 11::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#15'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
         ->  Seq Scan on lineitem  (cost=0.00..2021753.78 rows=2115578 width=21) (actual time=0.047..20974.686 rows=2141904 loops=1)
               Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
         ->  Hash  (cost=65962.00..65962.00 rows=2000000 width=30) (actual time=1410.609..1410.609 rows=2000000 loops=1)
               Buckets: 2048  Batches: 128  Memory Usage: 996kB
               ->  Seq Scan on part  (cost=0.00..65962.00 rows=2000000 width=30) (actual time=0.005..693.504 rows=2000000 loops=1)
                     Filter: (p_size >= 1)
 Total runtime: 24968.721 ms
(11 rows)

\i 20.sql
EXPLAIN ANALYZE
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'forest%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= date '1993-01-01'
					and l_shipdate < date '1993-01-01' + interval '1 year'
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'CANADA'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=42686081.48..42686091.48 rows=4000 width=51) (actual time=5930.817..5930.972 rows=1772 loops=1)
   Sort Key: supplier.s_name
   Sort Method: quicksort  Memory: 254kB
   ->  Hash Semi Join  (cost=42681337.17..42685842.17 rows=4000 width=51) (actual time=5869.160..5914.180 rows=1772 loops=1)
         Hash Cond: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Hash Join  (cost=1.32..3632.32 rows=4000 width=55) (actual time=0.047..38.004 rows=4054 loops=1)
               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=59) (actual time=0.008..19.346 rows=100000 loops=1)
               ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 1kB
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.009..0.017 rows=1 loops=1)
                           Filter: (n_name = 'CANADA'::bpchar)
         ->  Hash  (cost=42679408.18..42679408.18 rows=117493 width=4) (actual time=5868.216..5868.216 rows=58203 loops=1)
               Buckets: 4096  Batches: 8  Memory Usage: 262kB
               ->  Nested Loop  (cost=67406.67..42679408.18 rows=117493 width=4) (actual time=390.616..5839.566 rows=58203 loops=1)
                     ->  Unique  (cost=67406.67..67507.68 rows=20202 width=4) (actual time=390.438..405.295 rows=21551 loops=1)
                           ->  Sort  (cost=67406.67..67457.17 rows=20202 width=4) (actual time=390.437..397.762 rows=21551 loops=1)
                                 Sort Key: part.p_partkey
                                 Sort Method: external sort  Disk: 296kB
                                 ->  Seq Scan on part  (cost=0.00..65962.00 rows=20202 width=4) (actual time=0.008..368.644 rows=21551 loops=1)
                                       Filter: ((p_name)::text ~~ 'forest%'::text)
                     ->  Index Scan using ps_partkey_idx on partsupp  (cost=0.00..2109.22 rows=6 width=8) (actual time=0.191..0.251 rows=3 loops=21551)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=123.53..123.54 rows=1 width=5) (actual time=0.059..0.059 rows=1 loops=86204)
                                   ->  Index Scan using l_partkey_idx on lineitem  (cost=0.00..123.52 rows=1 width=5) (actual time=0.036..0.057 rows=1 loops=86204)
                                         Index Cond: (l_partkey = partsupp.ps_partkey)
                                         Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_suppkey = partsupp.ps_suppkey))
 Total runtime: 5931.340 ms
(30 rows)

\i 21.sql
EXPLAIN ANALYZE
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'BRAZIL'
group by
	s_name
order by
	numwait desc,
	s_name
limit 100;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4913701.98..4913701.98 rows=1 width=26) (actual time=98905.675..98905.697 rows=100 loops=1)
   ->  Sort  (cost=4913701.98..4913701.98 rows=1 width=26) (actual time=98905.675..98905.683 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method: top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=4913701.96..4913701.97 rows=1 width=26) (actual time=98902.136..98903.234 rows=3995 loops=1)
               ->  Nested Loop Anti Join  (cost=2709652.50..4913701.95 rows=1 width=26) (actual time=34754.414..98841.935 rows=39555 loops=1)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop  (cost=2709652.50..4913650.22 rows=1 width=34) (actual time=32138.858..87838.376 rows=704244 loops=1)
                           ->  Hash Semi Join  (cost=2709652.50..4913640.29 rows=1 width=38) (actual time=32034.685..69320.523 rows=1460757 loops=1)
                                 Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                 Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                 ->  Hash Join  (cost=3682.32..1958451.68 rows=799814 width=34) (actual time=39.665..26161.647 rows=1514802 loops=1)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..1871788.65 rows=19995351 width=8) (actual time=0.011..18677.139 rows=37929348 loops=1)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=3632.32..3632.32 rows=4000 width=30) (actual time=39.638..39.638 rows=3995 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 250kB
                                             ->  Hash Join  (cost=1.32..3632.32 rows=4000 width=30) (actual time=0.024..38.223 rows=3995 loops=1)
                                                   Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=34) (actual time=0.003..19.493 rows=100000 loops=1)
                                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.007..0.010 rows=1 loops=1)
                                                               Filter: (n_name = 'BRAZIL'::bpchar)
                                 ->  Hash  (cost=1721823.52..1721823.52 rows=59986052 width=8) (actual time=31857.001..31857.001 rows=59986052 loops=1)
                                       Buckets: 4096  Batches: 4096  Memory Usage: 609kB
                                       ->  Seq Scan on lineitem l2  (cost=0.00..1721823.52 rows=59986052 width=8) (actual time=0.005..14871.085 rows=59986052 loops=1)
                           ->  Index Scan using o_orderkey_idx on orders  (cost=0.00..9.92 rows=1 width=4) (actual time=0.012..0.012 rows=0 loops=1460757)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
                     ->  Index Scan using l_orderkey_idx on lineitem l3  (cost=0.00..25.52 rows=46 width=8) (actual time=0.015..0.015 rows=1 loops=704244)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: (l_receiptdate > l_commitdate)
 Total runtime: 98905.828 ms
(34 rows)

\i 22.sql
EXPLAIN ANALYZE
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('13', '31', '23', '29', '30', '18', '17')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('13', '31', '23', '29', '30', '18', '17')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as custsale
group by
	cntrycode
order by
	cntrycode;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=868908.06..869098.96 rows=7636 width=22) (actual time=11665.235..11758.623 rows=7 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=75319.34..75319.35 rows=1 width=6) (actual time=1573.588..1573.588 rows=1 loops=1)
           ->  Seq Scan on customer  (cost=0.00..75202.00 rows=46934 width=6) (actual time=0.012..1281.297 rows=381776 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
   ->  Sort  (cost=793588.72..793607.81 rows=7636 width=22) (actual time=11649.080..11727.054 rows=63914 loops=1)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         Sort Method: external merge  Disk: 2240kB
         ->  Hash Anti Join  (cost=657006.00..793096.25 rows=7636 width=22) (actual time=8930.416..11335.797 rows=63914 loops=1)
               Hash Cond: (public.customer.c_custkey = orders.o_custkey)
               ->  Seq Scan on customer  (cost=0.00..75202.00 rows=17240 width=26) (actual time=1573.606..2475.339 rows=190691 loops=1)
                     Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
               ->  Hash  (cost=410912.00..410912.00 rows=15000000 width=4) (actual time=7317.368..7317.368 rows=15000000 loops=1)
                     Buckets: 4096  Batches: 1024  Memory Usage: 570kB
                     ->  Seq Scan on orders  (cost=0.00..410912.00 rows=15000000 width=4) (actual time=0.009..3309.758 rows=15000000 loops=1)
 Total runtime: 11759.378 ms
(16 rows)

