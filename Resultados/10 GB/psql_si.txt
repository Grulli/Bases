\i 1.sql
EXPLAIN ANALYZE
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '90 day'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4236554.21..4236554.23 rows=6 width=25) (actual time=324802.957..324802.958 rows=4 loops=1)
   Sort Key: l_returnflag, l_linestatus
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=4236554.03..4236554.13 rows=6 width=25) (actual time=324802.862..324802.871 rows=4 loops=1)
         ->  Seq Scan on lineitem  (cost=0.00..1871769.95 rows=59119602 width=25) (actual time=11.870..33989.545 rows=59142609 loops=1)
               Filter: (l_shipdate <= '1998-09-02 00:00:00'::timestamp without time zone)
 Total runtime: 324803.269 ms
(7 rows)

\i 3.sql
EXPLAIN ANALYZE
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'HOUSEHOLD'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-29'
	and l_shipdate > date '1995-03-29'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
limit 10;;
                                                                            QUERY PLAN                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3768627.74..3768627.76 rows=10 width=24) (actual time=48180.145..48180.147 rows=10 loops=1)
   ->  Sort  (cost=3768627.74..3776627.38 rows=3199855 width=24) (actual time=48180.143..48180.143 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=3611484.01..3699480.02 rows=3199855 width=24) (actual time=47746.716..48145.718 rows=112994 loops=1)
               ->  Sort  (cost=3611484.01..3619483.65 rows=3199855 width=24) (actual time=47746.697..47837.863 rows=298135 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method: external merge  Disk: 10784kB
                     ->  Hash Join  (cost=687041.08..3068871.48 rows=3199855 width=24) (actual time=14495.050..47338.362 rows=298135 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1871769.95 rows=31878579 width=16) (actual time=0.012..18457.988 rows=31984182 loops=1)
                                 Filter: (l_shipdate > '1995-03-29'::date)
                           ->  Hash  (cost=660866.76..660866.76 rows=1505706 width=12) (actual time=14439.944..14439.944 rows=1471530 loops=1)
                                 Buckets: 4096  Batches: 128  Memory Usage: 506kB
                                 ->  Hash Join  (cost=59598.84..660866.76 rows=1505706 width=12) (actual time=1509.474..13963.700 rows=1471530 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..448419.56 rows=7377291 width=16) (actual time=22.767..8113.643 rows=7376597 loops=1)
                                             Filter: (o_orderdate < '1995-03-29'::date)
                                       ->  Hash  (cost=54576.14..54576.14 rows=306136 width=4) (actual time=1485.083..1485.083 rows=299751 loops=1)
                                             Buckets: 4096  Batches: 16  Memory Usage: 666kB
                                             ->  Seq Scan on customer  (cost=0.00..54576.14 rows=306136 width=4) (actual time=6.896..1312.656 rows=299751 loops=1)
                                                   Filter: (c_mktsegment = 'HOUSEHOLD'::bpchar)
 Total runtime: 48183.548 ms
(23 rows)

\i 4.sql
EXPLAIN ANALYZE
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1997-07-01'
	and o_orderdate < date '1997-07-01' + interval '3 month'
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2777877.71..2777877.72 rows=1 width=16) (actual time=41874.113..41874.114 rows=5 loops=1)
   Sort Key: orders.o_orderpriority
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=2777877.69..2777877.70 rows=1 width=16) (actual time=41874.096..41874.098 rows=5 loops=1)
         ->  Hash Semi Join  (cost=2199810.60..2777794.74 rows=16590 width=16) (actual time=30218.592..41695.722 rows=525915 loops=1)
               Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
               ->  Seq Scan on orders  (cost=0.00..485921.07 rows=573592 width=20) (actual time=0.018..2854.979 rows=573962 loops=1)
                     Filter: ((o_orderdate >= '1997-07-01'::date) AND (o_orderdate < '1997-10-01 00:00:00'::timestamp without time zone))
               ->  Hash  (cost=1871769.95..1871769.95 rows=19994852 width=4) (actual time=30171.096..30171.096 rows=37929348 loops=1)
                     Buckets: 4096  Batches: 2048 (originally 1024)  Memory Usage: 1025kB
                     ->  Seq Scan on lineitem  (cost=0.00..1871769.95 rows=19994852 width=4) (actual time=0.011..20147.654 rows=37929348 loops=1)
                           Filter: (l_commitdate < l_receiptdate)
 Total runtime: 41874.161 ms
(13 rows)

\i 6.sql
EXPLAIN ANALYZE
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1994-01-01'
	and l_shipdate < date '1994-01-01' + interval '1 year'
	and l_discount between 0.06 - 0.01 and 0.06 + 0.01
	and l_quantity < 24;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2477236.60..2477236.61 rows=1 width=12) (actual time=18806.303..18806.303 rows=1 loops=1)
   ->  Seq Scan on lineitem  (cost=0.00..2471615.51 rows=1124218 width=12) (actual time=0.039..17942.104 rows=1139264 loops=1)
         Filter: ((l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.05) AND (l_discount <= 0.07) AND (l_quantity < 24::numeric))
 Total runtime: 18806.331 ms
(4 rows)

\i 7.sql
EXPLAIN ANALYZE
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
				or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=2935326.04..2935367.12 rows=1264 width=224) (actual time=39446.803..39773.797 rows=4 loops=1)
   ->  Sort  (cost=2935326.04..2935329.20 rows=1264 width=224) (actual time=39313.498..39699.173 rows=58365 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method: external merge  Disk: 5112kB
         ->  Hash Join  (cost=740499.45..2935260.92 rows=1264 width=224) (actual time=31998.668..37980.305 rows=58365 loops=1)
               Hash Cond: ((orders.o_custkey = customer.c_custkey) AND (n2.n_nationkey = customer.c_nationkey))
               ->  Hash Join  (cost=661314.17..2832461.65 rows=214952 width=232) (actual time=7904.086..35847.461 rows=1460257 loops=1)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Hash Join  (cost=4291.56..2096688.78 rows=214952 width=232) (actual time=108.255..22229.332 rows=1460257 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2021731.34 rows=18271249 width=24) (actual time=0.022..16753.319 rows=18230325 loops=1)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=4276.86..4276.86 rows=1176 width=216) (actual time=108.162..108.162 rows=8010 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 720kB
                                 ->  Hash Join  (cost=674.10..4276.86 rows=1176 width=216) (actual time=21.493..104.461 rows=8010 loops=1)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=8) (actual time=21.151..76.156 rows=100000 loops=1)
                                       ->  Hash  (cost=674.08..674.08 rows=2 width=216) (actual time=0.313..0.313 rows=2 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                             ->  Nested Loop  (cost=0.00..674.08 rows=2 width=216) (actual time=0.147..0.308 rows=2 loops=1)
                                                   Join Filter: (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar)))
                                                   ->  Seq Scan on nation n1  (cost=0.00..11.70 rows=170 width=108) (actual time=0.016..0.017 rows=25 loops=1)
                                                   ->  Materialize  (cost=0.00..12.55 rows=170 width=108) (actual time=0.000..0.004 rows=25 loops=25)
                                                         ->  Seq Scan on nation n2  (cost=0.00..11.70 rows=170 width=108) (actual time=0.004..0.015 rows=25 loops=1)
                     ->  Hash  (cost=410918.05..410918.05 rows=15000605 width=8) (actual time=7757.513..7757.513 rows=15000000 loops=1)
                           Buckets: 4096  Batches: 1024  Memory Usage: 585kB
                           ->  Seq Scan on orders  (cost=0.00..410918.05 rows=15000605 width=8) (actual time=0.014..3451.133 rows=15000000 loops=1)
               ->  Hash  (cost=50826.31..50826.31 rows=1499931 width=8) (actual time=813.845..813.845 rows=1500000 loops=1)
                     Buckets: 4096  Batches: 64  Memory Usage: 929kB
                     ->  Seq Scan on customer  (cost=0.00..50826.31 rows=1499931 width=8) (actual time=0.012..413.618 rows=1500000 loops=1)
 Total runtime: 39775.425 ms
(31 rows)

\i 10.sql
EXPLAIN ANALYZE
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-03-01'
	and o_orderdate < date '1993-03-01' + interval '3 month'
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
limit 20;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3085048.54..3085048.59 rows=20 width=259) (actual time=56488.415..56488.418 rows=20 loops=1)
   ->  Sort  (cost=3085048.54..3086463.80 rows=566104 width=259) (actual time=56488.412..56488.415 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 30kB
         ->  GroupAggregate  (cost=3048755.82..3069984.72 rows=566104 width=259) (actual time=53564.509..56272.852 rows=381972 loops=1)
               ->  Sort  (cost=3048755.82..3050171.08 rows=566104 width=259) (actual time=53564.484..54647.385 rows=1148153 loops=1)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     Sort Method: external merge  Disk: 218816kB
                     ->  Hash Join  (cost=597205.38..2785681.08 rows=566104 width=259) (actual time=5924.487..30598.663 rows=1148153 loops=1)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=597191.56..2777883.32 rows=566104 width=159) (actual time=5924.440..30110.540 rows=1148153 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=495390.11..2629126.69 rows=566104 width=16) (actual time=3331.310..26134.492 rows=1148153 loops=1)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..1871769.95 rows=14714211 width=16) (actual time=0.024..15647.903 rows=14808183 loops=1)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=485921.07..485921.07 rows=577123 width=8) (actual time=3330.554..3330.554 rows=573330 loops=1)
                                             Buckets: 4096  Batches: 32  Memory Usage: 710kB
                                             ->  Seq Scan on orders  (cost=0.00..485921.07 rows=577123 width=8) (actual time=0.034..3144.442 rows=573330 loops=1)
                                                   Filter: ((o_orderdate >= '1993-03-01'::date) AND (o_orderdate < '1993-06-01 00:00:00'::timestamp without time zone))
                                 ->  Hash  (cost=50826.31..50826.31 rows=1499931 width=147) (actual time=1611.601..1611.601 rows=1500000 loops=1)
                                       Buckets: 1024  Batches: 512  Memory Usage: 558kB
                                       ->  Seq Scan on customer  (cost=0.00..50826.31 rows=1499931 width=147) (actual time=0.023..500.212 rows=1500000 loops=1)
                           ->  Hash  (cost=11.70..11.70 rows=170 width=108) (actual time=0.036..0.036 rows=25 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 2kB
                                 ->  Seq Scan on nation  (cost=0.00..11.70 rows=170 width=108) (actual time=0.009..0.020 rows=25 loops=1)
 Total runtime: 56551.096 ms
(27 rows)

\i 11.sql
EXPLAIN ANALYZE
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'GERMANY'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) * 0.0001000000
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'GERMANY'
		)
order by
	value desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=587585.20..587700.73 rows=46211 width=14) (actual time=11215.702..11215.702 rows=0 loops=1)
   Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
   Sort Method: quicksort  Memory: 25kB
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=288843.54..288843.55 rows=1 width=10) (actual time=3509.072..3509.072 rows=1 loops=1)
           ->  Hash Join  (cost=3616.37..288496.96 rows=46211 width=10) (actual time=40.984..3245.655 rows=323920 loops=1)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..254409.76 rows=8002376 width=14) (actual time=0.021..1578.758 rows=8000000 loops=1)
                 ->  Hash  (cost=3609.02..3609.02 rows=588 width=4) (actual time=40.866..40.866 rows=4049 loops=1)
                       Buckets: 1024  Batches: 1  Memory Usage: 143kB
                       ->  Hash Join  (cost=12.14..3609.02 rows=588 width=4) (actual time=0.053..39.655 rows=4049 loops=1)
                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                             ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=8) (actual time=0.014..20.895 rows=100000 loops=1)
                             ->  Hash  (cost=12.12..12.12 rows=1 width=4) (actual time=0.016..0.016 rows=1 loops=1)
                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                   ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4) (actual time=0.010..0.013 rows=1 loops=1)
                                         Filter: (n_name = 'GERMANY'::bpchar)
   ->  GroupAggregate  (cost=292868.37..294370.23 rows=46211 width=14) (actual time=11215.695..11215.695 rows=0 loops=1)
         Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
         ->  Sort  (cost=292868.37..292983.90 rows=46211 width=14) (actual time=7395.077..7452.578 rows=323920 loops=1)
               Sort Key: public.partsupp.ps_partkey
               Sort Method: external sort  Disk: 8248kB
               ->  Hash Join  (cost=3616.37..288496.96 rows=46211 width=14) (actual time=79.265..6919.930 rows=323920 loops=1)
                     Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..254409.76 rows=8002376 width=18) (actual time=31.329..4282.711 rows=8000000 loops=1)
                     ->  Hash  (cost=3609.02..3609.02 rows=588 width=4) (actual time=47.447..47.447 rows=4049 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 143kB
                           ->  Hash Join  (cost=12.14..3609.02 rows=588 width=4) (actual time=0.084..46.156 rows=4049 loops=1)
                                 Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                 ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=8) (actual time=0.024..24.758 rows=100000 loops=1)
                                 ->  Hash  (cost=12.12..12.12 rows=1 width=4) (actual time=0.025..0.025 rows=1 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                       ->  Seq Scan on nation  (cost=0.00..12.12 rows=1 width=4) (actual time=0.015..0.021 rows=1 loops=1)
                                             Filter: (n_name = 'GERMANY'::bpchar)
 Total runtime: 11218.699 ms
(35 rows)

\i 15.sql
create view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= date '1995-12-01'
		and l_shipdate < date '1995-12-01' + interval '3 month'
	group by
		l_suppkey;
CREATE VIEW

EXPLAIN ANALYZE
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join  (cost=4120378.85..4120934.14 rows=3686 width=103) (actual time=37733.854..37733.855 rows=1 loops=1)
   Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=2043963.04..2043963.05 rows=1 width=32) (actual time=18684.010..18684.010 rows=1 loops=1)
           ->  HashAggregate  (cost=2043880.11..2043916.97 rows=3686 width=16) (actual time=18635.914..18671.352 rows=100000 loops=1)
                 ->  Seq Scan on lineitem  (cost=0.00..2021731.34 rows=2214877 width=16) (actual time=0.026..15055.007 rows=2265119 loops=1)
                       Filter: ((l_shipdate >= '1995-12-01'::date) AND (l_shipdate < '1996-03-01 00:00:00'::timestamp without time zone))
   ->  Sort  (cost=15622.82..15872.82 rows=100000 width=71) (actual time=122.860..129.229 rows=33988 loops=1)
         Sort Key: supplier.s_suppkey
         Sort Method: external sort  Disk: 8008kB
         ->  Seq Scan on supplier  (cost=0.00..3216.00 rows=100000 width=71) (actual time=0.024..31.451 rows=100000 loops=1)
   ->  Sort  (cost=2060792.98..2060802.19 rows=3686 width=36) (actual time=37600.819..37600.819 rows=1 loops=1)
         Sort Key: revenue0.supplier_no
         Sort Method: quicksort  Memory: 25kB
         ->  Subquery Scan on revenue0  (cost=2060491.69..2060574.62 rows=3686 width=36) (actual time=37593.570..37600.806 rows=1 loops=1)
               ->  HashAggregate  (cost=2060491.69..2060537.76 rows=3686 width=16) (actual time=37593.569..37600.804 rows=1 loops=1)
                     Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                     ->  Seq Scan on lineitem  (cost=0.00..2021731.34 rows=2214877 width=16) (actual time=0.030..15221.531 rows=2265119 loops=1)
                           Filter: ((l_shipdate >= '1995-12-01'::date) AND (l_shipdate < '1996-03-01 00:00:00'::timestamp without time zone))
 Total runtime: 37736.160 ms
(20 rows)



drop view revenue0;
DROP VIEW
\i 19.sql
EXPLAIN ANALYZE
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#23'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 1 and l_quantity <= 1 + 10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#15'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 10 and l_quantity <= 10 + 10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#44'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 20 and l_quantity <= 20 + 10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=2300552.60..2300552.61 rows=1 width=12) (actual time=25663.892..25663.892 rows=1 loops=1)
   ->  Hash Join  (cost=104629.38..2300545.03 rows=1009 width=12) (actual time=2441.145..25662.289 rows=1053 loops=1)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (((part.p_brand = 'Brand#23'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 1::numeric) AND (lineitem.l_quantity <= 11::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#15'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
         ->  Seq Scan on lineitem  (cost=0.00..2021731.34 rows=2115526 width=21) (actual time=0.040..21323.173 rows=2141904 loops=1)
               Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
         ->  Hash  (cost=65960.19..65960.19 rows=1999855 width=30) (actual time=1758.315..1758.315 rows=2000000 loops=1)
               Buckets: 2048  Batches: 128  Memory Usage: 996kB
               ->  Seq Scan on part  (cost=0.00..65960.19 rows=1999855 width=30) (actual time=16.287..1008.892 rows=2000000 loops=1)
                     Filter: (p_size >= 1)
 Total runtime: 25663.971 ms
(11 rows)

\i 20.sql
EXPLAIN ANALYZE
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'forest%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= date '1993-01-01'
					and l_shipdate < date '1993-01-01' + interval '1 year'
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'CANADA'
order by
	s_name;
