\i 1.sql
EXPLAIN ANALYZE
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	lineitem
where
	l_shipdate <= date '1998-12-01' - interval '90 day'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=2116820.25..2116820.27 rows=6 width=25) (actual time=160235.414..160235.415 rows=4 loops=1)
   Sort Key: l_returnflag, l_linestatus
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=2116820.07..2116820.18 rows=6 width=25) (actual time=160235.308..160235.318 rows=4 loops=1)
         ->  Seq Scan on lineitem  (cost=0.00..934794.35 rows=29550643 width=25) (actual time=0.031..14223.551 rows=29577558 loops=1)
               Filter: (l_shipdate <= '1998-09-02 00:00:00'::timestamp without time zone)
 Total runtime: 160235.770 ms
(7 rows)

\i 3.sql
EXPLAIN ANALYZE
select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	customer,
	orders,
	lineitem
where
	c_mktsegment = 'HOUSEHOLD'
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate < date '1995-03-29'
	and l_shipdate > date '1995-03-29'
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
limit 10;;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1804105.29..1804105.31 rows=10 width=24) (actual time=21946.018..21946.021 rows=10 loops=1)
   ->  Sort  (cost=1804105.29..1807953.21 rows=1539167 width=24) (actual time=21946.017..21946.017 rows=10 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount)))), orders.o_orderdate
         Sort Method: top-N heapsort  Memory: 25kB
         ->  GroupAggregate  (cost=1728517.35..1770844.44 rows=1539167 width=24) (actual time=21725.716..21927.042 rows=56339 loops=1)
               ->  Sort  (cost=1728517.35..1732365.27 rows=1539167 width=24) (actual time=21725.690..21773.684 rows=148615 loops=1)
                     Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                     Sort Method: external merge  Disk: 5368kB
                     ->  Hash Join  (cost=337922.40..1507206.33 rows=1539167 width=24) (actual time=4522.328..21529.581 rows=148615 loops=1)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Seq Scan on lineitem  (cost=0.00..934794.35 rows=15949040 width=16) (actual time=0.014..9716.318 rows=15993641 loops=1)
                                 Filter: (l_shipdate > '1995-03-29'::date)
                           ->  Hash  (cost=325340.03..325340.03 rows=723790 width=12) (actual time=4491.029..4491.029 rows=732999 loops=1)
                                 Buckets: 4096  Batches: 64  Memory Usage: 503kB
                                 ->  Hash Join  (cost=29707.88..325340.03 rows=723790 width=12) (actual time=272.003..4253.499 rows=732999 loops=1)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Seq Scan on orders  (cost=0.00..224210.00 rows=3684034 width=16) (actual time=0.012..2084.742 rows=3688103 loops=1)
                                             Filter: (o_orderdate < '1995-03-29'::date)
                                       ->  Hash  (cost=27290.00..27290.00 rows=147350 width=4) (actual time=271.733..271.733 rows=149687 loops=1)
                                             Buckets: 4096  Batches: 8  Memory Usage: 665kB
                                             ->  Seq Scan on customer  (cost=0.00..27290.00 rows=147350 width=4) (actual time=0.003..232.976 rows=149687 loops=1)
                                                   Filter: (c_mktsegment = 'HOUSEHOLD'::bpchar)
 Total runtime: 21947.969 ms
(23 rows)

\i 4.sql
EXPLAIN ANALYZE
select
	o_orderpriority,
	count(*) as order_count
from
	orders
where
	o_orderdate >= date '1997-07-01'
	and o_orderdate < date '1997-07-01' + interval '3 month'
	and exists (
		select
			*
		from
			lineitem
		where
			l_orderkey = o_orderkey
			and l_commitdate < l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=445908.30..445908.31 rows=1 width=16) (actual time=4903.957..4903.957 rows=5 loops=1)
   Sort Key: orders.o_orderpriority
   Sort Method: quicksort  Memory: 25kB
   ->  HashAggregate  (cost=445908.28..445908.29 rows=1 width=16) (actual time=4903.936..4903.937 rows=5 loops=1)
         ->  Nested Loop Semi Join  (cost=0.00..445830.95 rows=15466 width=16) (actual time=0.107..4771.056 rows=262599 loops=1)
               ->  Seq Scan on orders  (cost=0.00..242960.00 rows=276422 width=20) (actual time=0.031..1622.246 rows=286549 loops=1)
                     Filter: ((o_orderdate >= '1997-07-01'::date) AND (o_orderdate < '1997-10-01 00:00:00'::timestamp without time zone))
               ->  Index Scan using l_orderkey_idx on lineitem  (cost=0.00..16.71 rows=24 width=4) (actual time=0.010..0.010 rows=1 loops=286549)
                     Index Cond: (l_orderkey = orders.o_orderkey)
                     Filter: (l_commitdate < l_receiptdate)
 Total runtime: 4904.056 ms
(11 rows)

\i 6.sql
EXPLAIN ANALYZE
select
	sum(l_extendedprice * l_discount) as revenue
from
	lineitem
where
	l_shipdate >= date '1994-01-01'
	and l_shipdate < date '1994-01-01' + interval '1 year'
	and l_discount between 0.06 - 0.01 and 0.06 + 0.01
	and l_quantity < 24;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=1237700.99..1237701.00 rows=1 width=12) (actual time=10242.655..10242.656 rows=1 loops=1)
   ->  Seq Scan on lineitem  (cost=0.00..1234792.23 rows=581752 width=12) (actual time=0.017..9797.541 rows=569999 loops=1)
         Filter: ((l_shipdate >= '1994-01-01'::date) AND (l_shipdate < '1995-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.05) AND (l_discount <= 0.07) AND (l_quantity < 24::numeric))
 Total runtime: 10242.690 ms
(4 rows)

\i 7.sql
EXPLAIN ANALYZE
select
	supp_nation,
	cust_nation,
	l_year,
	sum(volume) as revenue
from
	(
		select
			n1.n_name as supp_nation,
			n2.n_name as cust_nation,
			extract(year from l_shipdate) as l_year,
			l_extendedprice * (1 - l_discount) as volume
		from
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2
		where
			s_suppkey = l_suppkey
			and o_orderkey = l_orderkey
			and c_custkey = o_custkey
			and s_nationkey = n1.n_nationkey
			and c_nationkey = n2.n_nationkey
			and (
				(n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
				or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE')
			)
			and l_shipdate between date '1995-01-01' and date '1996-12-31'
	) as shipping
group by
	supp_nation,
	cust_nation,
	l_year
order by
	supp_nation,
	cust_nation,
	l_year;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=1577857.83..1578786.19 rows=28565 width=224) (actual time=19015.005..19115.259 rows=4 loops=1)
   ->  Sort  (cost=1577857.83..1577929.24 rows=28565 width=224) (actual time=18974.635..19079.089 rows=29439 loops=1)
         Sort Key: n1.n_name, n2.n_name, (date_part('year'::text, (lineitem.l_shipdate)::timestamp without time zone))
         Sort Method: external merge  Disk: 2584kB
         ->  Hash Join  (cost=370005.11..1572716.24 rows=28565 width=224) (actual time=15067.898..18302.640 rows=29439 loops=1)
               Hash Cond: ((orders.o_custkey = customer.c_custkey) AND (n2.n_nationkey = customer.c_nationkey))
               ->  Hash Join  (cost=330410.11..1470846.16 rows=714130 width=232) (actual time=4099.057..17199.322 rows=727693 loops=1)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Hash Join  (cost=1903.11..1052340.24 rows=714130 width=232) (actual time=23.883..11379.157 rows=727693 loops=1)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..1009793.82 rows=8933772 width=24) (actual time=0.027..9203.601 rows=9113214 loops=1)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=1853.15..1853.15 rows=3997 width=216) (actual time=23.798..23.798 rows=3992 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 359kB
                                 ->  Hash Join  (cost=16.65..1853.15 rows=3997 width=216) (actual time=0.281..22.214 rows=3992 loops=1)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..1609.00 rows=50000 width=8) (actual time=0.006..11.862 rows=50000 loops=1)
                                       ->  Hash  (cost=16.62..16.62 rows=2 width=216) (actual time=0.249..0.249 rows=2 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                             ->  Nested Loop  (cost=0.00..16.62 rows=2 width=216) (actual time=0.091..0.246 rows=2 loops=1)
                                                   Join Filter: (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar)))
                                                   ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=108) (actual time=0.011..0.011 rows=25 loops=1)
                                                   ->  Materialize  (cost=0.00..1.38 rows=25 width=108) (actual time=0.000..0.003 rows=25 loops=25)
                                                         ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=108) (actual time=0.002..0.007 rows=25 loops=1)
                     ->  Hash  (cost=205460.00..205460.00 rows=7500000 width=8) (actual time=4063.926..4063.926 rows=7500000 loops=1)
                           Buckets: 4096  Batches: 512  Memory Usage: 586kB
                           ->  Seq Scan on orders  (cost=0.00..205460.00 rows=7500000 width=8) (actual time=0.013..1803.847 rows=7500000 loops=1)
               ->  Hash  (cost=25415.00..25415.00 rows=750000 width=8) (actual time=416.345..416.345 rows=750000 loops=1)
                     Buckets: 4096  Batches: 32  Memory Usage: 929kB
                     ->  Seq Scan on customer  (cost=0.00..25415.00 rows=750000 width=8) (actual time=0.003..219.569 rows=750000 loops=1)
 Total runtime: 19116.187 ms
(31 rows)

\i 10.sql
EXPLAIN ANALYZE
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-03-01'
	and o_orderdate < date '1993-03-01' + interval '3 month'
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
limit 20;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1542691.82..1542691.87 rows=20 width=259) (actual time=29212.378..29212.385 rows=20 loops=1)
   ->  Sort  (cost=1542691.82..1543406.70 rows=285950 width=259) (actual time=29212.376..29212.378 rows=20 loops=1)
         Sort Key: (sum((lineitem.l_extendedprice * (1::numeric - lineitem.l_discount))))
         Sort Method: top-N heapsort  Memory: 30kB
         ->  GroupAggregate  (cost=1524359.67..1535082.80 rows=285950 width=259) (actual time=27766.241..29101.107 rows=191325 loops=1)
               ->  Sort  (cost=1524359.67..1525074.55 rows=285950 width=259) (actual time=27766.204..28289.643 rows=575176 loops=1)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     Sort Method: external merge  Disk: 109568kB
                     ->  Hash Join  (cost=298611.42..1392888.38 rows=285950 width=259) (actual time=3043.337..16318.645 rows=575176 loops=1)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Hash Join  (cost=298609.86..1388955.00 rows=285950 width=159) (actual time=3043.309..16070.787 rows=575176 loops=1)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=247705.86..1314496.32 rows=285950 width=16) (actual time=1822.562..14435.812 rows=575176 loops=1)
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Seq Scan on lineitem  (cost=0.00..934794.35 rows=7413947 width=16) (actual time=0.023..8896.827 rows=7406352 loops=1)
                                             Filter: (l_returnflag = 'R'::bpchar)
                                       ->  Hash  (cost=242960.00..242960.00 rows=289269 width=8) (actual time=1820.635..1820.635 rows=287056 loops=1)
                                             Buckets: 4096  Batches: 16  Memory Usage: 707kB
                                             ->  Seq Scan on orders  (cost=0.00..242960.00 rows=289269 width=8) (actual time=0.018..1717.876 rows=287056 loops=1)
                                                   Filter: ((o_orderdate >= '1993-03-01'::date) AND (o_orderdate < '1993-06-01 00:00:00'::timestamp without time zone))
                                 ->  Hash  (cost=25415.00..25415.00 rows=750000 width=147) (actual time=832.008..832.008 rows=750000 loops=1)
                                       Buckets: 1024  Batches: 256  Memory Usage: 557kB
                                       ->  Seq Scan on customer  (cost=0.00..25415.00 rows=750000 width=147) (actual time=0.004..268.293 rows=750000 loops=1)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=108) (actual time=0.019..0.019 rows=25 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 2kB
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=108) (actual time=0.006..0.010 rows=25 loops=1)
 Total runtime: 29251.314 ms
(27 rows)

\i 11.sql
EXPLAIN ANALYZE
select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	partsupp,
	supplier,
	nation
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = 'GERMANY'
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) > (
			select
				sum(ps_supplycost * ps_availqty) * 0.0001000000
			from
				partsupp,
				supplier,
				nation
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = 'GERMANY'
		)
order by
	value desc;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=340597.92..340995.94 rows=159207 width=14) (actual time=3693.790..3693.790 rows=0 loops=1)
   Sort Key: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)))
   Sort Method: quicksort  Memory: 25kB
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=151829.95..151829.96 rows=1 width=10) (actual time=1740.388..1740.388 rows=1 loops=1)
           ->  Hash Join  (cost=1842.83..150635.90 rows=159207 width=10) (actual time=21.110..1611.007 rows=160240 loops=1)
                 Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                 ->  Seq Scan on partsupp  (cost=0.00..127201.00 rows=4000000 width=14) (actual time=0.011..868.422 rows=4000000 loops=1)
                 ->  Hash  (cost=1817.83..1817.83 rows=2000 width=4) (actual time=21.067..21.067 rows=2003 loops=1)
                       Buckets: 1024  Batches: 1  Memory Usage: 71kB
                       ->  Hash Join  (cost=1.32..1817.83 rows=2000 width=4) (actual time=0.040..20.364 rows=2003 loops=1)
                             Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                             ->  Seq Scan on supplier  (cost=0.00..1609.00 rows=50000 width=8) (actual time=0.006..11.071 rows=50000 loops=1)
                             ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)
                                   Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                   ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.009..0.012 rows=1 loops=1)
                                         Filter: (n_name = 'GERMANY'::bpchar)
   ->  GroupAggregate  (cost=167114.81..172289.04 rows=159207 width=14) (actual time=3693.784..3693.784 rows=0 loops=1)
         Filter: (sum((public.partsupp.ps_supplycost * (public.partsupp.ps_availqty)::numeric)) > $0)
         ->  Sort  (cost=167114.81..167512.83 rows=159207 width=14) (actual time=1793.788..1820.602 rows=160240 loops=1)
               Sort Key: public.partsupp.ps_partkey
               Sort Method: external sort  Disk: 4072kB
               ->  Hash Join  (cost=1842.83..150635.90 rows=159207 width=14) (actual time=21.295..1640.133 rows=160240 loops=1)
                     Hash Cond: (public.partsupp.ps_suppkey = public.supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..127201.00 rows=4000000 width=18) (actual time=0.021..902.694 rows=4000000 loops=1)
                     ->  Hash  (cost=1817.83..1817.83 rows=2000 width=4) (actual time=21.253..21.253 rows=2003 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 71kB
                           ->  Hash Join  (cost=1.32..1817.83 rows=2000 width=4) (actual time=0.032..20.597 rows=2003 loops=1)
                                 Hash Cond: (public.supplier.s_nationkey = public.nation.n_nationkey)
                                 ->  Seq Scan on supplier  (cost=0.00..1609.00 rows=50000 width=8) (actual time=0.005..11.285 rows=50000 loops=1)
                                 ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=1)
                                       Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                       ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.008..0.011 rows=1 loops=1)
                                             Filter: (n_name = 'GERMANY'::bpchar)
 Total runtime: 3695.213 ms
(35 rows)

\i 15.sql
create view revenue0 (supplier_no, total_revenue) as
	select
		l_suppkey,
		sum(l_extendedprice * (1 - l_discount))
	from
		lineitem
	where
		l_shipdate >= date '1995-12-01'
		and l_shipdate < date '1995-12-01' + interval '3 month'
	group by
		l_suppkey;
CREATE VIEW

EXPLAIN ANALYZE
select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	supplier,
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Join  (cost=2051722.36..2054296.36 rows=1924 width=104) (actual time=20932.643..20932.647 rows=1 loops=1)
   Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=1021452.81..1021452.82 rows=1 width=32) (actual time=10529.127..10529.127 rows=1 loops=1)
           ->  HashAggregate  (cost=1021409.52..1021428.76 rows=1924 width=16) (actual time=10503.163..10522.419 rows=50000 loops=1)
                 ->  Seq Scan on lineitem  (cost=0.00..1009793.82 rows=1161570 width=16) (actual time=0.025..8464.140 rows=1130590 loops=1)
                       Filter: ((l_shipdate >= '1995-12-01'::date) AND (l_shipdate < '1996-03-01 00:00:00'::timestamp without time zone))
   ->  Index Scan using s_suppkey_idx on supplier  (cost=0.00..2420.14 rows=50000 width=72) (actual time=0.011..11.652 rows=32896 loops=1)
   ->  Sort  (cost=1030269.54..1030274.35 rows=1924 width=36) (actual time=20917.189..20917.190 rows=1 loops=1)
         Sort Key: revenue0.supplier_no
         Sort Method: quicksort  Memory: 25kB
         ->  Subquery Scan on revenue0  (cost=1030121.30..1030164.59 rows=1924 width=36) (actual time=20907.394..20917.179 rows=1 loops=1)
               ->  HashAggregate  (cost=1030121.30..1030145.35 rows=1924 width=16) (actual time=20907.392..20917.176 rows=1 loops=1)
                     Filter: (sum((public.lineitem.l_extendedprice * (1::numeric - public.lineitem.l_discount))) = $0)
                     ->  Seq Scan on lineitem  (cost=0.00..1009793.82 rows=1161570 width=16) (actual time=0.023..8367.505 rows=1130590 loops=1)
                           Filter: ((l_shipdate >= '1995-12-01'::date) AND (l_shipdate < '1996-03-01 00:00:00'::timestamp without time zone))
 Total runtime: 20933.220 ms
(17 rows)



drop view revenue0;
DROP VIEW
\i 19.sql
EXPLAIN ANALYZE
select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	lineitem,
	part
where
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#23'
		and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
		and l_quantity >= 1 and l_quantity <= 1 + 10
		and p_size between 1 and 5
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#15'
		and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
		and l_quantity >= 10 and l_quantity <= 10 + 10
		and p_size between 1 and 10
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = 'Brand#44'
		and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
		and l_quantity >= 20 and l_quantity <= 20 + 10
		and p_size between 1 and 15
		and l_shipmode in ('AIR', 'AIR REG')
		and l_shipinstruct = 'DELIVER IN PERSON'
	);


 Aggregate  (cost=1152851.78..1152851.79 rows=1 width=12) (actual time=13510.794..13510.794 rows=1 loops=1)
   ->  Hash Join  (cost=52318.00..1152847.58 rows=559 width=12) (actual time=798.715..13509.849 rows=575 loops=1)
         Hash Cond: (lineitem.l_partkey = part.p_partkey)
         Join Filter: (((part.p_brand = 'Brand#23'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 1::numeric) AND (lineitem.l_quantity <= 11::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#15'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= 10::numeric) AND (lineitem.l_quantity <= 20::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= 20::numeric) AND (lineitem.l_quantity <= 30::numeric) AND (part.p_size <= 15)))
         ->  Seq Scan on lineitem  (cost=0.00..1009793.82 rows=1059078 width=21) (actual time=0.050..11376.311 rows=1072367 loops=1)
               Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
         ->  Hash  (cost=32982.00..32982.00 rows=1000000 width=30) (actual time=736.386..736.386 rows=1000000 loops=1)
               Buckets: 2048  Batches: 64  Memory Usage: 993kB
               ->  Seq Scan on part  (cost=0.00..32982.00 rows=1000000 width=30) (actual time=0.006..368.854 rows=1000000 loops=1)
                     Filter: (p_size >= 1)
 Total runtime: 13510.880 ms
(11 rows)

\i 20.sql
EXPLAIN ANALYZE
select
	s_name,
	s_address
from
	supplier,
	nation
where
	s_suppkey in (
		select
			ps_suppkey
		from
			partsupp
		where
			ps_partkey in (
				select
					p_partkey
				from
					part
				where
					p_name like 'forest%'
			)
			and ps_availqty > (
				select
					0.5 * sum(l_quantity)
				from
					lineitem
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate >= date '1993-01-01'
					and l_shipdate < date '1993-01-01' + interval '1 year'
			)
	)
	and s_nationkey = n_nationkey
	and n_name = 'CANADA'
order by
	s_name;
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=11781412.34..11781415.52 rows=1273 width=52) (actual time=3801.783..3801.863 rows=931 loops=1)
   Sort Key: supplier.s_name
   Sort Method: quicksort  Memory: 133kB
   ->  Hash Semi Join  (cost=11779285.04..11781346.69 rows=1273 width=52) (actual time=3769.800..3793.756 rows=931 loops=1)
         Hash Cond: (supplier.s_suppkey = partsupp.ps_suppkey)
         ->  Hash Join  (cost=1.32..1817.83 rows=2000 width=56) (actual time=0.030..20.883 rows=2028 loops=1)
               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
               ->  Seq Scan on supplier  (cost=0.00..1609.00 rows=50000 width=60) (actual time=0.007..11.600 rows=50000 loops=1)
               ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 1kB
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.006..0.010 rows=1 loops=1)
                           Filter: (n_name = 'CANADA'::bpchar)
         ->  Hash  (cost=11778760.77..11778760.77 rows=31835 width=4) (actual time=3769.553..3769.553 rows=28877 loops=1)
               Buckets: 4096  Batches: 2  Memory Usage: 510kB
               ->  Nested Loop  (cost=33007.25..11778760.77 rows=31835 width=4) (actual time=220.436..3753.279 rows=28877 loops=1)
                     ->  HashAggregate  (cost=33007.25..33108.25 rows=10100 width=4) (actual time=220.072..228.176 rows=10648 loops=1)
                           ->  Seq Scan on part  (cost=0.00..32982.00 rows=10100 width=4) (actual time=0.005..213.715 rows=10648 loops=1)
                                 Filter: ((p_name)::text ~~ 'forest%'::text)
                     ->  Index Scan using ps_partkey_idx on partsupp  (cost=0.00..1162.90 rows=3 width=8) (actual time=0.270..0.330 rows=3 loops=10648)
                           Index Cond: (ps_partkey = part.p_partkey)
                           Filter: ((ps_availqty)::numeric > (SubPlan 1))
                           SubPlan 1
                             ->  Aggregate  (cost=128.29..128.30 rows=1 width=5) (actual time=0.076..0.076 rows=1 loops=42592)
                                   ->  Index Scan using l_partkey_idx on lineitem  (cost=0.00..128.29 rows=1 width=5) (actual time=0.046..0.074 rows=1 loops=42592)
                                         Index Cond: (l_partkey = partsupp.ps_partkey)
                                         Filter: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_suppkey = partsupp.ps_suppkey))
 Total runtime: 3802.050 ms
(27 rows)

\i 21.sql
EXPLAIN ANALYZE
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'BRAZIL'
group by
	s_name
order by
	numwait desc,
	s_name
limit 100;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2454796.30..2454796.31 rows=1 width=26) (actual time=52002.785..52002.808 rows=100 loops=1)
   ->  Sort  (cost=2454796.30..2454796.31 rows=1 width=26) (actual time=52002.784..52002.794 rows=100 loops=1)
         Sort Key: (count(*)), supplier.s_name
         Sort Method: top-N heapsort  Memory: 32kB
         ->  HashAggregate  (cost=2454796.28..2454796.29 rows=1 width=26) (actual time=52000.330..52000.829 rows=1980 loops=1)
               ->  Nested Loop Anti Join  (cost=1353822.05..2454796.28 rows=1 width=26) (actual time=20436.244..51971.445 rows=19573 loops=1)
                     Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                     ->  Nested Loop  (cost=1353822.05..2454762.20 rows=1 width=34) (actual time=16994.561..46778.179 rows=349176 loops=1)
                           ->  Hash Semi Join  (cost=1353822.05..2454753.10 rows=1 width=38) (actual time=16994.491..37528.738 rows=722326 loops=1)
                                 Hash Cond: (l1.l_orderkey = l2.l_orderkey)
                                 Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                                 ->  Hash Join  (cost=1842.83..978136.88 rows=399997 width=34) (actual time=21.065..13746.861 rows=748823 loops=1)
                                       Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                       ->  Seq Scan on lineitem l1  (cost=0.00..934794.35 rows=9999929 width=8) (actual time=0.013..10430.756 rows=18968099 loops=1)
                                             Filter: (l_receiptdate > l_commitdate)
                                       ->  Hash  (cost=1817.83..1817.83 rows=2000 width=30) (actual time=21.026..21.026 rows=1980 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 124kB
                                             ->  Hash Join  (cost=1.32..1817.83 rows=2000 width=30) (actual time=0.030..20.280 rows=1980 loops=1)
                                                   Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..1609.00 rows=50000 width=34) (actual time=0.005..10.971 rows=50000 loops=1)
                                                   ->  Hash  (cost=1.31..1.31 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 1kB
                                                         ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4) (actual time=0.010..0.013 rows=1 loops=1)
                                                               Filter: (n_name = 'BRAZIL'::bpchar)
                                 ->  Hash  (cost=859794.88..859794.88 rows=29999788 width=8) (actual time=16893.627..16893.627 rows=29999789 loops=1)
                                       Buckets: 4096  Batches: 2048  Memory Usage: 612kB
                                       ->  Seq Scan on lineitem l2  (cost=0.00..859794.88 rows=29999788 width=8) (actual time=0.005..7669.569 rows=29999789 loops=1)
                           ->  Index Scan using o_orderkey_idx on orders  (cost=0.00..9.09 rows=1 width=4) (actual time=0.012..0.012 rows=0 loops=722326)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
                     ->  Index Scan using l_orderkey_idx on lineitem l3  (cost=0.00..16.86 rows=24 width=8) (actual time=0.014..0.014 rows=1 loops=349176)
                           Index Cond: (l_orderkey = l1.l_orderkey)
                           Filter: (l_receiptdate > l_commitdate)
 Total runtime: 52002.916 ms
(34 rows)

\i 22.sql
EXPLAIN ANALYZE
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('13', '31', '23', '29', '30', '18', '17')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('13', '31', '23', '29', '30', '18', '17')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as custsale
group by
	cntrycode
order by
	cntrycode;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=434175.14..434263.79 rows=3546 width=22) (actual time=6171.098..6201.521 rows=7 loops=1)
   InitPlan 1 (returns $0)
     ->  Aggregate  (cost=37661.03..37661.04 rows=1 width=6) (actual time=814.326..814.326 rows=1 loops=1)
           ->  Seq Scan on customer  (cost=0.00..37602.50 rows=23412 width=6) (actual time=0.027..658.610 rows=190619 loops=1)
                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
   ->  Sort  (cost=396514.10..396522.97 rows=3546 width=22) (actual time=6165.417..6186.321 rows=31850 loops=1)
         Sort Key: ("substring"((public.customer.c_phone)::text, 1, 2))
         Sort Method: external merge  Disk: 1120kB
         ->  Hash Anti Join  (cost=328507.00..396305.03 rows=3546 width=22) (actual time=4765.405..6013.471 rows=31850 loops=1)
               Hash Cond: (public.customer.c_custkey = orders.o_custkey)
               ->  Seq Scan on customer  (cost=0.00..37602.50 rows=8620 width=26) (actual time=814.357..1296.210 rows=95103 loops=1)
                     Filter: ((c_acctbal > $0) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
               ->  Hash  (cost=205460.00..205460.00 rows=7500000 width=4) (actual time=3931.991..3931.991 rows=7500000 loops=1)
                     Buckets: 4096  Batches: 512  Memory Usage: 578kB
                     ->  Seq Scan on orders  (cost=0.00..205460.00 rows=7500000 width=4) (actual time=0.014..1823.332 rows=7500000 loops=1)
 Total runtime: 6202.009 ms
(16 rows)

